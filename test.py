# --- START OF FILE bot.py ---
import re
import glob
import asyncio
import os
import shlex
import functools
import logging
import io
import datetime
import time
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Document
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
)
from playwright.async_api import async_playwright, Page, TimeoutError

# --- CONFIGURATION ---
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

SUPPORT_REQUEST_INTERVAL = 5  # –ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∞–∂–¥—ã–µ –∫–æ–º–∞–Ω–¥
SUPPORT_URL = "https://rest-check.onrender.com/"

PLAYWRIGHT_STATE_DIR = "playwright_states"
os.makedirs(PLAYWRIGHT_STATE_DIR, exist_ok=True)

def get_user_state_path(user_id: int) -> str:
    return os.path.join(PLAYWRIGHT_STATE_DIR, f"{user_id}.json")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG #–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ DEBUG, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
)
logger = logging.getLogger(__name__)


# --- –ù–û–í–´–ô –ë–õ–û–ö: –õ–û–ì–ò–ö–ê –ó–ê–ü–†–û–°–ê –ü–û–î–î–ï–†–ñ–ö–ò ---

async def check_and_request_support(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ï—Å–ª–∏ –¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True.
    """
    user_id = update.effective_user.id
    request_count = context.user_data.get('request_count', 0)

    if request_count >= SUPPORT_REQUEST_INTERVAL:
        keyboard = [
            [
                InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=SUPPORT_URL),
            ],
            [
                InlineKeyboardButton("‚úÖ –Ø –ø–µ—Ä–µ—à–µ–ª –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –ø—Ä–æ–µ–∫—Ç", callback_data="reset_support_counter"),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.effective_message.reply_text(
            "üôè **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç!**\n\n"
            "–ß—Ç–æ–±—ã —è –º–æ–≥ –∏ –¥–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –Ω–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞. "
            "–¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return True  # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    return False # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã

async def reset_support_counter_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ—Ö–æ–¥.
    """
    query = update.callback_query
    await query.answer()
    
    context.user_data['request_count'] = 0
    logger.info(f"–°—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    
    await query.edit_message_text("üòä **–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!**\n\n–í—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.")

def command_wrapper(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞."""
    @functools.wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if await check_and_request_support(update, context):
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        await func(update, context, *args, **kwargs)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        context.user_data['request_count'] = context.user_data.get('request_count', 0) + 1
        logger.info(f"–°—á–µ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è {update.effective_user.id} —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {context.user_data['request_count']}")

    return wrapped


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–±–∞–≥–∞:
async def take_screenshot(page: Page, name: str):
     if not page or page.is_closed():
         logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç '{name}': —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
         return
     try:
         screenshots_dir = "debug_screenshots"
         os.makedirs(screenshots_dir, exist_ok=True)
         timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
         safe_name = "".join(c for c in name if c.isalnum() or c in ('_', '-')).rstrip()
         path = os.path.join(screenshots_dir, f"{safe_name}_{timestamp}.png")
         await page.screenshot(path=path)
         logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {path}")
     except Exception as e:
         logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç '{name}': {e}")


async def get_whatsapp_page(context: ContextTypes.DEFAULT_TYPE, user_id: int, force_new: bool = False, force_no_locale: bool = False) -> Page | None:
    user_data = context.user_data

    # –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Playwright
    needs_full_reinitialization = force_new or \
                                  'browser' not in user_data or \
                                  not user_data['browser'].is_connected() or \
                                  'playwright_context' not in user_data or \
                                  user_data['playwright_context'] is None

    if needs_full_reinitialization:
        if 'browser' in user_data and user_data['browser'].is_connected():
            logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –ø–µ—Ä–µ–¥ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π.", user_id)
            await user_data['browser'].close()
        
        logger.info("–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Playwright –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s...", user_id)
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Playwright –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for key in ['browser', 'playwright_context', 'whatsapp_page']:
            user_data.pop(key, None)

        try:
            p = await async_playwright().start()
            browser = await p.chromium.launch(headless=True, args=['--no-sandbox', '--disable-setuid-sandbox', '--disable-blink-features=AutomationControlled'])
            user_data['browser'] = browser
            
            user_state_path = get_user_state_path(user_id)
            user_state_exists = os.path.exists(user_state_path)

            context_options = {
                "storage_state": user_state_path if user_state_exists else None,
                "user_agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            }

            # --- –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ò –ù–ï–¢ —Ñ–ª–∞–≥–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
            if user_state_exists and not force_no_locale:
                logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –¥–ª—è {user_id}. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª–∏ 'ru-RU'.")
                context_options["locale"] = "ru-RU"
            else:
                if force_no_locale:
                    logger.warning(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –ª–æ–∫–∞–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
                else:
                    logger.info(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –¥–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–µ–∑ –ª–æ–∫–∞–ª–∏.")

            pw_context = await browser.new_context(**context_options)
            user_data['playwright_context'] = pw_context

            page = await pw_context.new_page()
            user_data['whatsapp_page'] = page
            return page
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Playwright –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    else:
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        pw_context = user_data['playwright_context']
        page = user_data.get('whatsapp_page')

        if page and not page.is_closed():
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ WhatsApp –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s.", user_id)
            return page
        
        logger.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é.", user_id)
        try:
            page = await pw_context.new_page()
            user_data['whatsapp_page'] = page
            return page
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Playwright –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {e}")
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Playwright –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", user_id)
            return await get_whatsapp_page(context, user_id, force_new=True)

async def smart_check_and_get_page(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> Page | None:
    """
    "–£–º–Ω–∞—è" —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª—å—é (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Å—Å–∏—è),
    –∞ –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏ (–Ω–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —á–∞—Ç–æ–≤), –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –±–µ–∑ –ª–æ–∫–∞–ª–∏.
    """
    # --- –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ1: –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–∞—è, —Å –ª–æ–∫–∞–ª—å—é ---
    logger.info(f"–£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è {user_id}: –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ1 (—Å –ª–æ–∫–∞–ª—å—é, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Å—Å–∏—è).")
    page = await get_whatsapp_page(context, user_id)
    if not page:
        return None # –ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –≤–æ–æ–±—â–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è

    try:
        await page.goto("https://web.whatsapp.com/", timeout=45000)
        if await check_login_status(page):
            logger.info(f"–£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è {user_id}: –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ1 —É—Å–ø–µ—à–Ω–∞, —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞.")
            return page # –í—Å–µ —Ö–æ—Ä–æ—à–æ, —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    except TimeoutError:
        logger.warning(f"–£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è {user_id}: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞ 45 —Å–µ–∫—É–Ω–¥.")
    except Exception as e:
        logger.error(f"–£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è {user_id}: –û—à–∏–±–∫–∞ –Ω–∞ –ü–æ–ø—ã—Ç–∫–µ ‚Ññ1: {e}")


    # --- –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ2: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, –±–µ–∑ –ª–æ–∫–∞–ª–∏ ---
    logger.warning(f"–£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è {user_id}: –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ1 –Ω–µ —É–¥–∞–ª–∞—Å—å. –ó–∞–ø—É—Å–∫–∞—é –ü–æ–ø—ã—Ç–∫—É ‚Ññ2 (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –±–µ–∑ –ª–æ–∫–∞–ª–∏).")
    await take_screenshot(page, "smart_check_failed_attempt_1")

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å —Ñ–ª–∞–≥–æ–º force_no_locale
    page = await get_whatsapp_page(context, user_id, force_new=True, force_no_locale=True)
    if not page:
        return None

    try:
        await page.goto("https://web.whatsapp.com/", timeout=60000)
        logger.info(f"–£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è {user_id}: –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ2 (–±–µ–∑ –ª–æ–∫–∞–ª–∏) –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return page # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∫–∞–∫–æ–π –±—ã –æ–Ω–∞ –Ω–∏ –±—ã–ª–∞ (—Å QR –∏–ª–∏ —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ–π)
    except Exception as e:
        logger.error(f"–£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è {user_id}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –ü–æ–ø—ã—Ç–∫–µ ‚Ññ2: {e}")
        await take_screenshot(page, "smart_check_failed_attempt_2")
        return None

async def check_login_status(page: Page) -> bool:
    try:
        search_box_selector = 'div[aria-placeholder="–ü–æ–∏—Å–∫ –∏–ª–∏ –Ω–æ–≤—ã–π —á–∞—Ç"], div[aria-placeholder="Search or start a new chat"]'
        await page.wait_for_selector(search_box_selector, timeout=60000)
        await take_screenshot(page, "login_success")      
        logger.info("–°–µ—Å—Å–∏—è WhatsApp –∞–∫—Ç–∏–≤–Ω–∞.")
        return True
    except TimeoutError:
        logger.info("–°–µ—Å—Å–∏—è WhatsApp –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ —É—Å–ø–µ–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è.")
        await take_screenshot(page,"login_timeout")
        return False

async def find_and_click_chat(page: Page, chat_name: str) -> bool:
    search_box_selector = 'div[aria-placeholder="–ü–æ–∏—Å–∫ –∏–ª–∏ –Ω–æ–≤—ã–π —á–∞—Ç"], div[aria-placeholder="Search or start a new chat"]'
    try:
        logger.info(f"–ü–æ–∏—Å–∫ —á–∞—Ç–∞: '{chat_name}'")
        await page.locator(search_box_selector).fill(chat_name)
        await asyncio.sleep(1)
        
        chat_title_selector = f'span[title="{chat_name}"]'
        await page.wait_for_selector(chat_title_selector, timeout=60000)
        
        chat_container = page.locator(f'div[role="listitem"]:has({chat_title_selector})')
        await chat_container.click()

        logger.info(f"–ß–∞—Ç '{chat_name}' –Ω–∞–π–¥–µ–Ω –∏ –æ—Ç–∫—Ä—ã—Ç.")
        await asyncio.sleep(0.5)
        await take_screenshot(page, f"chat_opened_{chat_name.replace(' ', '_')}")
        return True
    except TimeoutError:
        logger.warning(f"–ß–∞—Ç '{chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞.")
        await page.locator(search_box_selector).fill("") # –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫
        return False

# --- TELEGRAM COMMAND HANDLERS ---

@command_wrapper
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üëã **–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ WhatsApp.**\n\n"
        "**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**\n"
        "1Ô∏è‚É£ `/login` - –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π WhatsApp.\n"
        "2Ô∏è‚É£ `/send \"–ò–º—è —á–∞—Ç–∞\" \"–¢–µ–∫—Å—Ç\"` - –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞.\n"
        "3Ô∏è‚É£ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∏ –≤ –ø–æ–¥–ø–∏—Å–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `/send \"–ò–º—è —á–∞—Ç–∞\"` –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞.\n\n"
        "üí° **–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞:**\n"
        "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è, –ø—Ä–æ—Å—Ç–æ –∑–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ'. –ë–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É, –∫–æ–≥–¥–∞ –æ–Ω–∞ –ø—Ä–∏–¥–µ—Ç.",
        parse_mode='Markdown'
    )

@command_wrapper
async def login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = await update.message.reply_text("üîÑ –ó–∞–ø—É—Å–∫–∞—é —É–º–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Å—Å–∏–∏...")

    page = await smart_check_and_get_page(context, update.effective_user.id)
    if not page:
        await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –º—ã —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã
        if await check_login_status(page):
            await msg.edit_text("‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ WhatsApp. –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞.")
            await take_screenshot(page, "login_already_logged_in")
            # –°–æ—Ö—Ä–∞–Ω–∏–º —Å–µ—Å—Å–∏—é –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–∞ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å
            user_state_path = get_user_state_path(update.effective_user.id)
            await context.user_data['playwright_context'].storage_state(path=user_state_path)
            return

        # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç, —Å–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏ –º—ã –¥–æ–ª–∂–Ω—ã –∏—Å–∫–∞—Ç—å QR-–∫–æ–¥
        await msg.edit_text("–°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ò—â—É QR-–∫–æ–¥...")
        qr_selector = 'canvas[aria-label="Scan this QR code to link a device!"]'
        
        try:
            # –ñ–¥–µ–º QR-–∫–æ–¥
            await page.wait_for_selector(qr_selector, timeout=30000)
            await msg.edit_text("üì∑ –ù–∞–π–¥–µ–Ω QR-–∫–æ–¥. –û—Ç–ø—Ä–∞–≤–ª—è—é...")

            qr_element = page.locator(qr_selector)
            await take_screenshot(page, "login_qr_found")
            qr_code_screenshot = await qr_element.screenshot()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–∞—Ä—Ç–∏–Ω–∫—É
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=msg.message_id)
            await update.message.reply_photo(
                photo=io.BytesIO(qr_code_screenshot),
                caption="–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è WhatsApp. –£ –≤–∞—Å –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥."
            )

            # –ñ–¥–µ–º –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            chat_list_selector = 'div[aria-placeholder="–ü–æ–∏—Å–∫ –∏–ª–∏ –Ω–æ–≤—ã–π —á–∞—Ç"], div[aria-placeholder="Search or start a new chat"]'
            await page.wait_for_selector(chat_list_selector, timeout=60000)
            await take_screenshot(page, "login_success")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—É—é —Å–µ—Å—Å–∏—é
            user_state_path = get_user_state_path(update.effective_user.id)
            await context.user_data['playwright_context'].storage_state(path=user_state_path)
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}.")
            await update.message.reply_text("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

        except TimeoutError:
            await take_screenshot(page, "login_qr_timeout")
            await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ QR-–∫–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /login —Å–Ω–æ–≤–∞.")

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
        await take_screenshot(page, "login_unhandled_exception")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /login —Å–Ω–æ–≤–∞.")

async def send_command_internal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.effective_message
    if not message: return
    command_text = message.text or message.caption
    attachment = message.effective_attachment

    if not command_text:
        return

    try:
        args = shlex.split(command_text)
        chat_name = None
        message_text = None

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–∞–∑–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ –∏ —Ç–µ–∫—Å—Ç–∞ ---
        if attachment: # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞
            if isinstance(attachment, tuple):  # —Ñ–æ—Ç–æ
                await message.reply_text(
                    "‚ö†Ô∏è –§–æ—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å **—Ç–æ–ª—å–∫–æ –∫–∞–∫ —Ñ–∞–π–ª—ã**.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª' –≤ Telegram –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ:\n"
                    "`/send \"–ò–º—è —á–∞—Ç–∞\"`",
                    parse_mode='Markdown'
                )
                return

            if not isinstance(attachment, Document):
                await message.reply_text(
                    "‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã.",
                    parse_mode='Markdown'
                )
                return
            chat_name = args[1].strip()
            message_text = None # –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        else: # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            if len(args) != 3:
                await message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "`/send \"–ò–º—è —á–∞—Ç–∞\" \"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\"`",
                    parse_mode='Markdown'
                )
                return
            chat_name = args[1].strip()
            message_text = args[2].strip()

    except (ValueError, IndexError):
        await message.reply_text("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è —á–∞—Ç–∞ –∏ —Ç–µ–∫—Å—Ç –∑–∞–∫–ª—é—á–µ–Ω–æ –≤ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏.")
        return

    # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    context.user_data['request_count'] = context.user_data.get('request_count', 0) + 1
    logger.info(f"–°—á–µ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è {update.effective_user.id} —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {context.user_data['request_count']}")

    msg_status = await update.effective_message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å–µ—Å—Å–∏—é WhatsApp...")
    page = await get_whatsapp_page(context, update.effective_user.id) # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π get, —Ç.–∫. –Ω–µ —Ö–æ—Ç–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    
    if not page:
        await msg_status.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /login.")
        return

    try:
        await page.goto("https://web.whatsapp.com/", wait_until="domcontentloaded", timeout=30000)
    except TimeoutError:
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞–∂–µ –Ω–µ –≥—Ä—É–∑–∏—Ç—Å—è, —Ç–æ —Å–µ—Å—Å–∏–∏ —Ç–æ—á–Ω–æ –Ω–µ—Ç
        logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ send_command_internal.")
        # –ù–∏–∂–µ check_login_status –≤–µ—Ä–Ω–µ—Ç False

    if not await check_login_status(page):
        await msg_status.edit_text("‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ WhatsApp. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login.")
        # –ú–æ–∂–Ω–æ –¥–∞–∂–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –±–µ–∑ –ª–æ–∫–∞–ª–∏, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π /login —Å—Ä–∞–±–æ—Ç–∞–ª –±—ã—Å—Ç—Ä–µ–µ
        await get_whatsapp_page(context, update.effective_user.id, force_new=True, force_no_locale=True)
        return

    await msg_status.edit_text(f"–ò—â—É —á–∞—Ç '{chat_name}'...")
    if not await find_and_click_chat(page, chat_name):
        await msg_status.edit_text(f"‚ùå –ß–∞—Ç —Å –∏–º–µ–Ω–µ–º '{chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    download_path=None
    try:
        if attachment:
            await msg_status.edit_text("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ...")

            # --- –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ ---
            file_to_download = attachment[-1] if isinstance(attachment, tuple) else attachment
            file_id = file_to_download.file_id
            tg_file = await context.bot.get_file(file_id)
            file_name = getattr(file_to_download, 'file_name', f"{file_to_download.file_unique_id}.jpg")

            download_path = os.path.join("temp_files", file_name)
            os.makedirs("temp_files", exist_ok=True)
            await tg_file.download_to_drive(custom_path=download_path)

            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
            delivered_selector = 'span[aria-label=" –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ "], span[aria-label=" Delivered "]'
            before_count = await page.locator(delivered_selector).count()
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏: {before_count}")

            await msg_status.edit_text(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª '{file_name}' –≤ '{chat_name}'...")

            # –ù–∞–∂–∏–º–∞–µ–º ¬´–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å¬ª
            attach_button_selector = '[aria-label="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å"], [aria-label="Attach"]'
            await page.locator(attach_button_selector).click()
            await asyncio.sleep(2)  # –∂–¥—ë–º –∞–Ω–∏–º–∞—Ü–∏—é –º–µ–Ω—é

            # –ñ–º—ë–º ¬´–î–æ–∫—É–º–µ–Ω—Ç¬ª
            button_container = page.get_by_role("button", name=re.compile("^(–î–æ–∫—É–º–µ–Ω—Ç|Document)$"))
            span_to_click = button_container.locator('span:has-text("–î–æ–∫—É–º–µ–Ω—Ç"), span:has-text("Document")')

            async with page.expect_file_chooser() as fc_info:
                await span_to_click.nth(1).click()
            file_chooser = await fc_info.value
            await file_chooser.set_files(download_path)

            # –ñ–º—ë–º ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª
            send_button_selector = '[aria-label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"], [aria-label="Send"]'
            await page.locator(send_button_selector).click(timeout=60000)

            # –ñ–¥—ë–º –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ delivered-–∏–∫–æ–Ω–æ–∫)
            try:
                await page.wait_for_function(
                    """([selector, before]) => {
                        const elements = document.querySelectorAll(selector);
                        return elements.length > before;
                    }""",
                    arg=(delivered_selector, before_count),
                    timeout=60000
                )
                await msg_status.edit_text(
                    "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! "
                    "–ò–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏–¥—ë—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞."
                )
            except TimeoutError:
                await msg_status.edit_text("‚ö†Ô∏è –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏.")

            if os.path.exists(download_path):
                os.remove(download_path)

        elif message_text:
            await msg_status.edit_text(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ '{chat_name}'...")
            msg_box_selector = 'div[aria-placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"], div[aria-placeholder="Type a message"]'
            await page.locator(msg_box_selector).fill(message_text)

            send_button_selector = '[aria-label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"], [aria-label="Send"]'
            await page.locator(send_button_selector).click()

            # –î–ª—è —Ç–µ–∫—Å—Ç–∞ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫—É—é –∂–µ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏
            try:
                delivered_selector = 'span[aria-label=" –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ "], span[aria-label=" Delivered "]'
                before_count = await page.locator(delivered_selector).count()
                await page.wait_for_function(
                    """([selector, before]) => {
                        const elements = document.querySelectorAll(selector);
                        return elements.length > before;
                    }""",
                    arg=(delivered_selector, before_count),
                    timeout=60000
                )
                await msg_status.edit_text(
                    "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ! "
                    "–ò–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏–¥—ë—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
                )
            except TimeoutError:
                await msg_status.edit_text("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏.")


    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        await msg_status.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")
        await take_screenshot(page, "send_universal_error")
    finally:
        logger.info("–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è: –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É WhatsApp.")
        
        timer_msg = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–æ–º
        try:

            total_duration = 10
            update_interval = 2

            start_time = time.monotonic()  # —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
            end_time = start_time + total_duration

            timer_msg = await update.effective_message.reply_text(
                f"‚è≥ –°–±—Ä–∞—Å—ã–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ WhatsApp –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ {total_duration} —Å–µ–∫..."
            )

            while True:
                remaining = int(end_time - time.monotonic())
                if remaining <= 0:
                    await timer_msg.edit_text("üîÑ –í—ã–ø–æ–ª–Ω—è—é —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
                    await take_screenshot(page, "wap_before_updating")
                    await page.goto("https://web.whatsapp.com/", wait_until="domcontentloaded", timeout=15000)
                    await asyncio.sleep(1)
                    await timer_msg.delete()
                    break

                # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ update_interval —Å–µ–∫—É–Ω–¥
                if remaining % update_interval == 0:
                    try:
                        await timer_msg.edit_text(
                            f"‚è≥ –°–±—Ä–∞—Å—ã–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ WhatsApp –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ {remaining} —Å–µ–∫..."
                        )
                    except Exception as e:
                        if "message is not modified" not in str(e).lower():
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä: {e}")

                await asyncio.sleep(1)


        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {e}")
            # –ï—Å–ª–∏ –¥–∞–∂–µ —ç—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ, –±—Ä–∞—É–∑–µ—Ä "—É–º–µ—Ä", –ª—É—á—à–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
            await get_whatsapp_page(context, update.effective_user.id, force_new=True)
            if timer_msg:
                await timer_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")

        if download_path and os.path.exists(download_path):
            os.remove(download_path)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {download_path}")


# –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è send_command, —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç
async def send_command_wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if await check_and_request_support(update, context):
        return
    await send_command_internal(update, context)


# --- MAIN ---

def main() -> None:

    for file in glob.glob(os.path.join(PLAYWRIGHT_STATE_DIR, "*.json")):
        try:
            os.remove(file)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π state —Ñ–∞–π–ª {file}: {e}")

    if not TELEGRAM_TOKEN:
        logger.critical("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ.")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    send_handler = MessageHandler(
        (filters.TEXT & filters.Regex(r'^/send')) | 
        (filters.ATTACHMENT & filters.CaptionRegex(r'^/send')),
        send_command_wrapper # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–µ—Ä—Ç–∫—É
    )

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("login", login))
    application.add_handler(send_handler)
    # --- –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ ---
    application.add_handler(CallbackQueryHandler(reset_support_counter_callback, pattern='^reset_support_counter$'))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()

# --- END OF FILE bot.py ---