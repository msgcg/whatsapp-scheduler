# --- START OF FILE bot.py ---
import re
import asyncio
import os
import shlex
import json
import functools
import logging
import io
import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from playwright.async_api import async_playwright, Page, TimeoutError

# --- CONFIGURATION ---
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

PLAYWRIGHT_STATE_PATH = "playwright_state.json"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# --- PLAYWRIGHT HELPERS ---

async def take_screenshot(page: Page, name: str):
    if not page or page.is_closed():
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç '{name}': —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
        return
    try:
        screenshots_dir = "debug_screenshots"
        os.makedirs(screenshots_dir, exist_ok=True)
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        safe_name = "".join(c for c in name if c.isalnum() or c in ('_', '-')).rstrip()
        path = os.path.join(screenshots_dir, f"{safe_name}_{timestamp}.png")
        await page.screenshot(path=path)
        logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {path}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç '{name}': {e}")

async def get_whatsapp_page(context: ContextTypes.DEFAULT_TYPE, force_new: bool = False) -> Page | None:
    if force_new and 'browser' in context.bot_data and context.bot_data['browser'].is_connected():
        logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±—Ä–∞—É–∑–µ—Ä–∞...")
        await context.bot_data['browser'].close()
        for key in ['browser', 'playwright_context', 'whatsapp_page']:
            context.bot_data.pop(key, None)

    if 'browser' in context.bot_data and context.bot_data['browser'].is_connected():
        page = context.bot_data.get('whatsapp_page')
        if page and not page.is_closed():
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ WhatsApp.")
            return page
        
        logger.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é.")
        pw_context = context.bot_data['playwright_context']
        page = await pw_context.new_page()
        context.bot_data['whatsapp_page'] = page
        return page

    logger.info("–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Playwright...")
    try:
        p = await async_playwright().start()
        browser = await p.chromium.launch(headless=True, args=['--no-sandbox', '--disable-setuid-sandbox', '--disable-blink-features=AutomationControlled'])
        context.bot_data['browser'] = browser
        storage_state = PLAYWRIGHT_STATE_PATH if os.path.exists(PLAYWRIGHT_STATE_PATH) else None
        
        pw_context = await browser.new_context(
            storage_state=storage_state,
            locale="ru-RU",  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —è–∑—ã–∫–∏
            user_agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        )
        context.bot_data['playwright_context'] = pw_context
        
        page = await pw_context.new_page()
        context.bot_data['whatsapp_page'] = page
        return page
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Playwright: {e}")
        return None

async def check_login_status(page: Page) -> bool:
    try:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ ---
        search_box_selector = 'div[aria-placeholder="–ü–æ–∏—Å–∫ –∏–ª–∏ –Ω–æ–≤—ã–π —á–∞—Ç"], div[aria-placeholder="Search or start a new chat"]'
        await page.wait_for_selector(search_box_selector, timeout=5000)
        await take_screenshot(page, "login_success")
        logger.info("–°–µ—Å—Å–∏—è WhatsApp –∞–∫—Ç–∏–≤–Ω–∞.")
        return True
    except TimeoutError:
        logger.info("–°–µ—Å—Å–∏—è WhatsApp –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ —É—Å–ø–µ–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è.")
        await page.screenshot(path="login_timeout.png")
        return False

async def find_and_click_chat(page: Page, chat_name: str) -> bool:
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ ---
    search_box_selector = 'div[aria-placeholder="–ü–æ–∏—Å–∫ –∏–ª–∏ –Ω–æ–≤—ã–π —á–∞—Ç"], div[aria-placeholder="Search or start a new chat"]'
    try:
        logger.info(f"–ü–æ–∏—Å–∫ —á–∞—Ç–∞: '{chat_name}'")
        await page.locator(search_box_selector).fill(chat_name)
        await asyncio.sleep(1)
        
        chat_title_selector = f'span[title="{chat_name}"]'
        await page.wait_for_selector(chat_title_selector, timeout=5000)
        
        chat_container = page.locator(f'div[role="listitem"]:has({chat_title_selector})')
        await chat_container.click()

        logger.info(f"–ß–∞—Ç '{chat_name}' –Ω–∞–π–¥–µ–Ω –∏ –æ—Ç–∫—Ä—ã—Ç.")
        await asyncio.sleep(0.5)
        await take_screenshot(page, f"chat_opened_{chat_name.replace(' ', '_')}")
        return True
    except TimeoutError:
        logger.warning(f"–ß–∞—Ç '{chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞.")
        await page.locator(search_box_selector).fill("") # –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫
        return False

# --- TELEGRAM COMMAND HANDLERS ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üëã **–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ WhatsApp.**\n\n"
        "**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**\n"
        "1Ô∏è‚É£ `/login` - –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π WhatsApp.\n"
        "2Ô∏è‚É£ `/send \"–ò–º—è —á–∞—Ç–∞\" \"–¢–µ–∫—Å—Ç\"` - –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞.\n"
        "3Ô∏è‚É£ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∏ –≤ –ø–æ–¥–ø–∏—Å–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `/send \"–ò–º—è —á–∞—Ç–∞\"` –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞.\n\n"
        "üí° **–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞:**\n"
        "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è, –ø—Ä–æ—Å—Ç–æ –∑–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ'. –ë–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É, –∫–æ–≥–¥–∞ –æ–Ω–∞ –ø—Ä–∏–¥–µ—Ç.",
        parse_mode='Markdown'
    )

async def login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    force_new = 'new' in (context.args or [])
    msg = await update.message.reply_text("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
    page = await get_whatsapp_page(context, force_new=force_new)
    if not page:
        await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    try:
        await msg.edit_text("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ WhatsApp Web...")
        await page.goto("https://web.whatsapp.com/", timeout=15000)
        await take_screenshot(page, "login_goto")

        qr_selector = 'canvas[aria-label="Scan this QR code to link a device!"]'
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ ---
        chat_list_selector = 'div[aria-placeholder="–ü–æ–∏—Å–∫ –∏–ª–∏ –Ω–æ–≤—ã–π —á–∞—Ç"], div[aria-placeholder="Search or start a new chat"]'

        try:
            # –ñ–¥–µ–º QR
            await page.wait_for_selector(qr_selector, timeout=15000)
            await msg.edit_text("üì∑ –ù–∞–π–¥–µ–Ω QR-–∫–æ–¥. –û—Ç–ø—Ä–∞–≤–ª—è—é...")

            qr_element = page.locator(qr_selector)
            await take_screenshot(page, "login_qr_found")
            qr_code_screenshot = await qr_element.screenshot()

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–∞—Ä—Ç–∏–Ω–∫—É
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=msg.message_id)
            qr_msg = await update.message.reply_photo(
                photo=io.BytesIO(qr_code_screenshot),
                caption="–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è WhatsApp. –£ –≤–∞—Å –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥."
            )

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
            try:
                await page.wait_for_selector(chat_list_selector, timeout=60000)
                await take_screenshot(page, "login_success")

                await context.bot_data['playwright_context'].storage_state(path=PLAYWRIGHT_STATE_PATH)
                logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
                await update.message.reply_text("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

            except TimeoutError:
                await take_screenshot(page, "login_timeout")
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤. –°–µ—Å—Å–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π.")
                await update.message.reply_document(document=open("debug_screenshots/login_timeout.png", "rb"))

        except TimeoutError:
            # –ï—Å–ª–∏ QR –Ω–µ –ø–æ—è–≤–∏–ª—Å—è ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç —É–∂–µ –≤–æ—à–ª–∏
            if await check_login_status(page):
                await msg.edit_text("‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ WhatsApp. –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞.")
                await take_screenshot(page, "login_already_logged_in")
            else:
                await take_screenshot(page, "login_error")
                await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ QR-–∫–æ–¥ –∏–ª–∏ –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                await update.message.reply_document(document=open("debug_screenshots/login_error.png", "rb"))

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
        await take_screenshot(page, "login_unhandled_exception")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /login —Å–Ω–æ–≤–∞.")
        await update.message.reply_document(document=open("debug_screenshots/login_unhandled_exception.png", "rb"))


async def send_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.effective_message
    if not message:
        return

    command_text = message.text or message.caption
    attachment = message.effective_attachment

    if not command_text:
        return

    try:
        args = shlex.split(command_text)
        if not (2 <= len(args) <= 3):
            await message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "`/send \"–ò–º—è —á–∞—Ç–∞\" \"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\"`\n"
                "–ò–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∏ –≤ –ø–æ–¥–ø–∏—Å–∏ —É–∫–∞–∂–∏—Ç–µ:\n"
                "`/send \"–ò–º—è —á–∞—Ç–∞\"`",
                parse_mode='Markdown'
            )
            return
            
        chat_name = args[1].strip()
        message_text = args[2].strip() if len(args) > 2 else None

        if not attachment and not message_text:
            await message.reply_text("‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å. –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª.")
            return

    except (ValueError, IndexError):
        await message.reply_text("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è —á–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–æ –≤ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏.")
        return

    msg_status = await message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å–µ—Å—Å–∏—é WhatsApp...")
    page = await get_whatsapp_page(context)
    if not page or not await check_login_status(page):
        await msg_status.edit_text("‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ WhatsApp. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login.")
        return

    await msg_status.edit_text(f"–ò—â—É —á–∞—Ç '{chat_name}'...")
    if not await find_and_click_chat(page, chat_name):
        await msg_status.edit_text(f"‚ùå –ß–∞—Ç —Å –∏–º–µ–Ω–µ–º '{chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    download_path=None
    try:
        if attachment:
            await msg_status.edit_text("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ...")
            file_id = attachment.file_id
            tg_file = await context.bot.get_file(file_id)
            file_name = getattr(attachment, 'file_name', f"{attachment.file_unique_id}.jpg")
            
            download_path = os.path.join("temp_files", file_name)
            os.makedirs("temp_files", exist_ok=True)
            await tg_file.download_to_drive(custom_path=download_path)

            await msg_status.edit_text(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª '{file_name}' –≤ '{chat_name}'...")
            
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å" ---
            attach_button_selector = '[aria-label="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å"], [aria-label="Attach"]'
            await page.locator(attach_button_selector).click()
            
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –º–µ–Ω—é –≤–ª–æ–∂–µ–Ω–∏—è...")
            await asyncio.sleep(2)
            await take_screenshot(page, "sendfile_attach_menu_fully_visible")
            
            # --- –ù–û–í–´–ô –î–í–£–Ø–ó–´–ß–ù–´–ô –ö–û–î (–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê) ---
            file_type = getattr(attachment, 'mime_type', '').lower()

            # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–º–µ–Ω–∞ –∫–Ω–æ–ø–æ–∫
            if 'image' in file_type or 'video' in file_type:
                button_name_ru = "–§–æ—Ç–æ –∏ –≤–∏–¥–µ–æ"
                button_name_en = "Photos & videos"
            else:
                button_name_ru = "–î–æ–∫—É–º–µ–Ω—Ç"
                button_name_en = "Document"

            # 2. –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–Ω–æ–ø–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ–±–æ–∏–º —è–∑—ã–∫–∞–º.
            #    –≠—Ç–æ –∞–Ω–∞–ª–æ–≥ –≤–∞—à–µ–≥–æ page.get_by_role("button", name=button_name)
            button_container = page.get_by_role("button", name=re.compile(f"^({button_name_ru}|{button_name_en})$"))

            # 3. –í–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞—Ö–æ–¥–∏–º –¢–û–ß–ù–´–ô SPAN —Å —Ç–µ–∫—Å—Ç–æ–º, –∫–∞–∫ –≤—ã –∏ –¥–µ–ª–∞–ª–∏.
            #    –°–µ–ª–µ–∫—Ç–æ—Ä –∏—â–µ—Ç span, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ª–∏–±–æ —Ä—É—Å—Å–∫–∏–π, –ª–∏–±–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç.
            span_selector = f'span:has-text("{button_name_ru}"), span:has-text("{button_name_en}")'
            span_to_click = button_container.locator(span_selector)

            # 4. –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫ –ø–æ span –∏ –æ–∂–∏–¥–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞.
            async with page.expect_file_chooser() as fc_info:
                await span_to_click.nth(1).click()

            file_chooser = await fc_info.value
            await file_chooser.set_files(download_path)
            
            if message_text:
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—è –ø–æ–¥–ø–∏—Å–∏ ---
                caption_selector = 'div[aria-label*="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å"], div[aria-label*="Add a caption"]'
                await page.wait_for_selector(caption_selector, timeout=15000)
                await page.locator(caption_selector).fill(message_text)
                await take_screenshot(page, "sendfile_caption_filled")

            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" ---
            send_button_selector = '[aria-label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"], [aria-label="Send"]'
            await page.locator(send_button_selector).click(timeout=60000)
            
            await msg_status.edit_text("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

            if os.path.exists(download_path):
                os.remove(download_path)

        elif message_text:
            await msg_status.edit_text(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ '{chat_name}'...")
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ---
            msg_box_selector = 'div[aria-placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"], div[aria-placeholder="Type a message"]'
            await page.locator(msg_box_selector).fill(message_text)
            await take_screenshot(page, "send_message_filled")
            
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" ---
            send_button_selector = '[aria-label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"], [aria-label="Send"]'
            await page.locator(send_button_selector).click()
            await msg_status.edit_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        await msg_status.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")
        await take_screenshot(page, "send_universal_error")
    finally:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ë–ª–æ–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏ ---
        logger.info("–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è: –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É WhatsApp.")
        try:
            await asyncio.sleep(5)
            await take_screenshot(page, "wap_before_updating")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
            await page.goto("https://web.whatsapp.com/", wait_until="domcontentloaded", timeout=15000)
            await asyncio.sleep(1) # –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–≥–Ω–æ–≤–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≥—Ä—É–∑–∫—É
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {e}")
            # –ï—Å–ª–∏ –¥–∞–∂–µ —ç—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ, –±—Ä–∞—É–∑–µ—Ä "—É–º–µ—Ä", –ª—É—á—à–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
            await get_whatsapp_page(context, force_new=True)

        if download_path and os.path.exists(download_path):
            os.remove(download_path)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {download_path}")

# --- MAIN ---

def main() -> None:
    if not TELEGRAM_TOKEN:
        logger.critical("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ.")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    send_handler = MessageHandler(
        (filters.TEXT & filters.Regex(r'^/send')) | 
        (filters.ATTACHMENT & filters.CaptionRegex(r'^/send')),
        send_command
    )

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("login", login))
    application.add_handler(send_handler)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()

# --- END OF FILE bot.py ---